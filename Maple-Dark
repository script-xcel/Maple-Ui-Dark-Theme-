local Library = {}

local LibraryName = tostring(math.random(100000,200000))..tostring(math.random(100000,200000))..tostring(math.random(100000,200000))


local Theme = {
    Background = Color3.fromRGB(15, 15, 20), -- Darker main background
    SecondaryBackground = Color3.fromRGB(22, 22, 28), -- Sidebar background
    ContrastBackground = Color3.fromRGB(30, 30, 38), -- Interactive elements
    AccentColor = Color3.fromRGB(90, 90, 255), -- Deep blue accent
    HoverColor = Color3.fromRGB(100, 100, 255), -- Slightly lighter accent for hover states
    LightText = Color3.fromRGB(240, 240, 245), -- Slightly off-white text
    DimText = Color3.fromRGB(160, 160, 180), -- Slightly blue-tinted gray for secondary text
    Shadow = Color3.fromRGB(8, 8, 12), -- Shadow color for depth effects
    Success = Color3.fromRGB(70, 180, 120), -- Green for success states
    Error = Color3.fromRGB(220, 75, 75) -- Red for error states
}

local UIFont = Enum.Font.GothamSemibold

-- Toggle UI visibility
function Library:Toggle()
    if game.CoreGui:FindFirstChild(LibraryName).Enabled then 
        game.CoreGui:FindFirstChild(LibraryName).Enabled = false
    else 
        game.CoreGui:FindFirstChild(LibraryName).Enabled = true
    end
end


function Library:Drag(obj)
    local UserInputService = game:GetService("UserInputService")
    
    local gui = obj
    
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
    
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Create main UI
function Library:Create(xHubName, xGameName)
    local xHubName = xHubName or "Maple UI"
    local xGameName = xGameName or "By Maple"
    
    -- Create UI elements
    local ScreenGui = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local MainCorner = Instance.new("UICorner")
    local MainStroke = Instance.new("UIStroke")
    local Sidebar = Instance.new("Frame")
    local SidebarCorner = Instance.new("UICorner")
    local Filler = Instance.new("Frame")
    local HubName = Instance.new("TextLabel")
    local Line = Instance.new("Frame")
    local ActualSide = Instance.new("ScrollingFrame")
    local ActualSideListLayout = Instance.new("UIListLayout")
    local SideLine = Instance.new("Frame")
    local GameName = Instance.new("TextLabel")
    local TabHolder = Instance.new("Frame")
    local Tabs = Instance.new("Folder")

    -- Function to update scrolling frame size
    function ScrollSize()
        ActualSide.CanvasSize = UDim2.new(0, 0, 0, ActualSideListLayout.AbsoluteContentSize.Y)
    end

    -- Setup ScreenGui
    ScreenGui.Parent = game.CoreGui
    ScreenGui.ResetOnSpawn = false 
    ScreenGui.Name = LibraryName
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- Main frame setup
    Main.Name = "Main"
    Main.Parent = ScreenGui
    Main.BackgroundColor3 = Theme.Background
    Main.Position = UDim2.new(0.278277636, 0, 0.281287253, 0)
    Main.Size = UDim2.new(0, 580, 0, 370)
    Main.ClipsDescendants = true

    -- Add shadow effect
    local MainShadow = Instance.new("ImageLabel")
    MainShadow.Name = "MainShadow"
    MainShadow.Parent = Main
    MainShadow.BackgroundTransparency = 1
    MainShadow.Position = UDim2.new(0, -15, 0, -15)
    MainShadow.Size = UDim2.new(1, 30, 1, 30)
    MainShadow.ZIndex = 0
    MainShadow.Image = "rbxassetid://6014261993"
    MainShadow.ImageColor3 = Theme.Shadow
    MainShadow.ScaleType = Enum.ScaleType.Slice
    MainShadow.SliceCenter = Rect.new(49, 49, 450, 450)

    MainCorner.CornerRadius = UDim.new(0, 6)
    MainCorner.Name = "MainCorner"
    MainCorner.Parent = Main

    MainStroke.Name = "MainStroke"
    MainStroke.Parent = Main
    MainStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    MainStroke.Color = Color3.fromRGB(40, 40, 50)
    MainStroke.Thickness = 1

    -- Sidebar setup
    Sidebar.Name = "Sidebar"
    Sidebar.Parent = Main
    Sidebar.BackgroundColor3 = Theme.SecondaryBackground
    Sidebar.Size = UDim2.new(0, 140, 0, 370)

    SidebarCorner.Name = "SidebarCorner"
    SidebarCorner.Parent = Sidebar
    SidebarCorner.CornerRadius = UDim.new(0, 6)

    Filler.Name = "Filler"
    Filler.Parent = Sidebar
    Filler.BackgroundColor3 = Theme.SecondaryBackground
    Filler.BorderSizePixel = 0
    Filler.Position = UDim2.new(0.930769145, 0, 0, 0)
    Filler.Size = UDim2.new(0, 9, 0, 370)

    HubName.Name = "HubName"
    HubName.Parent = Sidebar
    HubName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HubName.BackgroundTransparency = 1.000
    HubName.BorderSizePixel = 0
    HubName.Position = UDim2.new(0, 0, 0.024324324, 0)
    HubName.Size = UDim2.new(0, 140, 0, 21)
    HubName.Font = UIFont
    HubName.Text = xHubName
    HubName.TextColor3 = Theme.LightText
    HubName.TextSize = 16.000

    Line.Name = "Line"
    Line.Parent = Sidebar
    Line.BackgroundColor3 = Theme.AccentColor
    Line.BorderSizePixel = 0
    Line.Position = UDim2.new(0.0642857179, 0, 0.148648649, 0)
    Line.Size = UDim2.new(0, 121, 0, 2)

    ActualSide.Name = "ActualSide"
    ActualSide.Parent = Sidebar
    ActualSide.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ActualSide.BackgroundTransparency = 1.000
    ActualSide.BorderSizePixel = 0
    ActualSide.Position = UDim2.new(0, 0, 0.172972977, 0)
    ActualSide.Size = UDim2.new(0, 139, 0, 297)
    ActualSide.CanvasSize = UDim2.new(0,0,0,0)
    ActualSide.ScrollBarThickness = 2
    ActualSide.ScrollBarImageColor3 = Theme.AccentColor

    ActualSideListLayout.Name = "ActualSideListLayout"
    ActualSideListLayout.Parent = ActualSide
    ActualSideListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ActualSideListLayout.Padding = UDim.new(0, 5)

    SideLine.Name = "SideLine"
    SideLine.Parent = Sidebar
    SideLine.BackgroundColor3 = Theme.Shadow
    SideLine.BorderSizePixel = 0
    SideLine.Position = UDim2.new(1, 0, 0, 0)
    SideLine.Size = UDim2.new(0, 1, 0, 370)

    GameName.Name = "GameName"
    GameName.Parent = Sidebar
    GameName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    GameName.BackgroundTransparency = 1.000
    GameName.BorderSizePixel = 0
    GameName.Position = UDim2.new(-0.00714285718, 0, 0.0810810775, 0)
    GameName.Size = UDim2.new(0, 141, 0, 25)
    GameName.Font = UIFont
    GameName.Text = xGameName
    GameName.TextColor3 = Theme.DimText
    GameName.TextSize = 14.000

    TabHolder.Name = "TabHolder"
    TabHolder.Parent = Main
    TabHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabHolder.BackgroundTransparency = 1.000
    TabHolder.BorderSizePixel = 0
    TabHolder.Position = UDim2.new(0.244827583, 0, 0.024324324, 0)
    TabHolder.Size = UDim2.new(0, 438, 0, 352)

    Tabs.Name = "Tabs"
    Tabs.Parent = TabHolder

    Library:Drag(Main)

    local xTabs = {}
    
    function xTabs:Tab(Name, xVisible)
        local Name = Name or "Tab"
        local Tab = Instance.new("ScrollingFrame")
        local TabListLayout = Instance.new("UIListLayout")
        local TabButton = Instance.new("TextButton")
        local TabButtonPadding = Instance.new("UIPadding")
        
        ScrollSize()

        function Size()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabListLayout.AbsoluteContentSize.Y + 10)
        end

        Tab.Name = "Tab"
        Tab.Parent = Tabs
        Tab.Active = true
        Tab.Visible = xVisible
        Tab.BackgroundColor3 = Theme.Background
        Tab.BorderSizePixel = 0
        Tab.Size = UDim2.new(0, 438, 0, 352)
        Tab.ScrollBarThickness = 3
        Tab.ScrollBarImageColor3 = Theme.AccentColor
        
        TabListLayout.Name = "TabListLayout"
        TabListLayout.Parent = Tab
        TabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabListLayout.Padding = UDim.new(0, 8)

        TabButton.Name = "TabButton"
        TabButton.Parent = ActualSide
        TabButton.BackgroundColor3 = xVisible and Theme.AccentColor or Theme.SecondaryBackground
        TabButton.BorderSizePixel = 0
        TabButton.Size = UDim2.new(0, 130, 0, 35)
        TabButton.Position = UDim2.new(0.5, 0, 0, 0)
        TabButton.AnchorPoint = Vector2.new(0.5, 0)
        TabButton.Font = UIFont
        TabButton.Text = "  " .. Name
        TabButton.TextColor3 = xVisible and Theme.LightText or Theme.DimText
        TabButton.TextSize = 14.000
        TabButton.TextXAlignment = Enum.TextXAlignment.Center
        TabButton.ZIndex = 2
        
        local TabButtonCorner = Instance.new("UICorner")
        TabButtonCorner.CornerRadius = UDim.new(0, 4)
        TabButtonCorner.Parent = TabButton
        
        TabButtonPadding.Name = "TabButtonPadding"
        TabButtonPadding.Parent = TabButton
        TabButtonPadding.PaddingLeft = UDim.new(0, 0)
        TabButtonPadding.PaddingRight = UDim.new(0, 0)

        Size()
        Tab.ChildAdded:Connect(Size)
        Tab.ChildRemoved:Connect(Size)

        TabButton.MouseButton1Down:Connect(function()
            Size()
            for i,v in pairs(ActualSide:GetChildren()) do 
                if v:IsA("TextButton") then 
                    v.BackgroundColor3 = Theme.SecondaryBackground
                    v.TextColor3 = Theme.DimText
                end
            end

            for i,v in pairs(Tabs:GetChildren()) do
                v.Visible = false
            end

            Tab.Visible = true
            game:GetService("TweenService"):Create(TabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                BackgroundColor3 = Theme.AccentColor
            }):Play()
            game:GetService("TweenService"):Create(TabButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                TextColor3 = Theme.LightText
            }):Play()
        end)

        local Elements = {}

        function Elements:Label(Name)
            local Name = Name or "Label"
            local LabelFunction = {}
            local LabelFrame = Instance.new("Frame")
            local LabelFrameCorner = Instance.new("UICorner")
            local Label = Instance.new("TextLabel")

            LabelFrame.Name = tostring(Name).."_Label"
            LabelFrame.Parent = Tab
            LabelFrame.BackgroundColor3 = Theme.AccentColor
            LabelFrame.Position = UDim2.new(0.0456621014, 0, 0, 0)
            LabelFrame.Size = UDim2.new(0, 408, 0, 35)

            LabelFrameCorner.Name = "LabelFrameCorner"
            LabelFrameCorner.Parent = LabelFrame
            LabelFrameCorner.CornerRadius = UDim.new(0, 4)

            Label.Name = "Label"
            Label.Parent = LabelFrame
            Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Label.BackgroundTransparency = 1.000
            Label.BorderSizePixel = 0
            Label.Size = UDim2.new(0, 408, 0, 35)
            Label.Font = UIFont
            Label.Text = Name
            Label.TextColor3 = Theme.LightText
            Label.TextSize = 16.000

            Label.MouseEnter:Connect(function()
                game:GetService("TweenService"):Create(LabelFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Theme.HoverColor
                }):Play()
            end)
            Label.MouseLeave:Connect(function()
                game:GetService("TweenService"):Create(LabelFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Theme.AccentColor
                }):Play()
            end)

            function LabelFunction:UpdateLabel(Name)
                Label.Text = Name
                LabelFrame.Name = tostring(Name).."_Label"
            end
            return LabelFunction
        end

        function Elements:Button(Name, Callback)
            local Name = Name or "Button"
            local ButtonFunction = {}
            local Callback = Callback or function () end
            local ButtonFrame = Instance.new("Frame")
            local ButtonFrameCorner = Instance.new("UICorner")
            local Button = Instance.new("TextButton")
            local ButtonCorner = Instance.new("UICorner")
            local ButtonPadding = Instance.new("UIPadding")

            ButtonFrame.Name = tostring(Name).."_Button"
            ButtonFrame.Parent = Tab
            ButtonFrame.BackgroundColor3 = Theme.ContrastBackground
            ButtonFrame.Size = UDim2.new(0, 408, 0, 35)
            
            ButtonFrameCorner.Name = "ButtonFrameCorner"
            ButtonFrameCorner.Parent = ButtonFrame
            ButtonFrameCorner.CornerRadius = UDim.new(0, 4)
            
            Button.Name = "Button"
            Button.Parent = ButtonFrame
            Button.BackgroundColor3 = Theme.ContrastBackground
            Button.Size = UDim2.new(0, 408, 0, 35)
            Button.Font = UIFont
            Button.TextColor3 = Theme.LightText
            Button.TextSize = 14.000
            Button.Text = Name
            Button.TextXAlignment = Enum.TextXAlignment.Left
            Button.ZIndex = 2
            
            ButtonCorner.Name = "ButtonCorner"
            ButtonCorner.Parent = Button
            ButtonCorner.CornerRadius = UDim.new(0, 4)
            
            ButtonPadding.Name = "ButtonPadding"
            ButtonPadding.Parent = Button
            ButtonPadding.PaddingLeft = UDim.new(0, 10)
            
            -- Create ripple effect for button
            local function CreateRipple()
                local Ripple = Instance.new("Frame")
                local RippleCorner = Instance.new("UICorner")
                
                Ripple.Name = "Ripple"
                Ripple.Parent = Button
                Ripple.AnchorPoint = Vector2.new(0.5, 0.5)
                Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Ripple.BackgroundTransparency = 0.85
                Ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
                Ripple.Size = UDim2.new(0, 0, 0, 0)
                Ripple.ZIndex = 1
                
                RippleCorner.CornerRadius = UDim.new(1, 0)
                RippleCorner.Parent = Ripple
                
                -- Animate ripple
                game:GetService("TweenService"):Create(Ripple, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1
                }):Play()
                
                -- Remove ripple after animation
                game:GetService("Debris"):AddItem(Ripple, 0.5)
            end

            Button.MouseButton1Down:Connect(function()
                CreateRipple()
                
                game:GetService("TweenService"):Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Theme.AccentColor
                }):Play()
                
                wait(0.1)
                
                game:GetService("TweenService"):Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Theme.ContrastBackground
                }):Play()
                
                pcall(Callback)
            end)

            Button.MouseEnter:Connect(function()
                game:GetService("TweenService"):Create(Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Color3.fromRGB(40, 40, 48)
                }):Play()
            end)
            
            Button.MouseLeave:Connect(function()
                game:GetService("TweenService"):Create(Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Theme.ContrastBackground
                }):Play()
            end)

            function ButtonFunction:UpdateButton(Name)
                Button.Text = Name
                ButtonFrame.Name = tostring(Name).."_Button"
            end
            
            return ButtonFunction
        end

        function Elements:Toggle(Name, Callback)
            local Name = Name or "Toggle"
            local Callback = Callback or function() end
            local ToggleEnabled = false
            local ToggleFrame = Instance.new("Frame")
            local ToggleName = Instance.new("TextLabel")
            local ToggleNamePadding = Instance.new("UIPadding")
            local ToggleFrameCorner = Instance.new("UICorner")
            local ToggleCorner = Instance.new("UICorner")
            local ToggleF = Instance.new("Frame")
            local ToggleButton = Instance.new("TextButton")
            
            -- Use a modern circle toggle indicator rather than image
            local ToggleCircle = Instance.new("Frame")
            local ToggleCircleCorner = Instance.new("UICorner")

            ToggleFrame.Name = tostring(Name).."_Toggle"
            ToggleFrame.Parent = Tab
            ToggleFrame.BackgroundColor3 = Theme.ContrastBackground
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.Size = UDim2.new(0, 408, 0, 35)

            ToggleName.Name = "ToggleName"
            ToggleName.Parent = ToggleFrame
            ToggleName.BackgroundColor3 = Theme.ContrastBackground
            ToggleName.BackgroundTransparency = 1.000
            ToggleName.BorderSizePixel = 0
            ToggleName.Size = UDim2.new(0, 347, 0, 35)
            ToggleName.Font = UIFont
            ToggleName.Text = Name
            ToggleName.TextColor3 = Theme.LightText
            ToggleName.TextSize = 14.000
            ToggleName.TextXAlignment = Enum.TextXAlignment.Left

            ToggleNamePadding.Name = "ToggleNamePadding"
            ToggleNamePadding.Parent = ToggleName
            ToggleNamePadding.PaddingLeft = UDim.new(0, 10)

            ToggleFrameCorner.Name = "ToggleFrameCorner"
            ToggleFrameCorner.Parent = ToggleFrame
            ToggleFrameCorner.CornerRadius = UDim.new(0, 4)

            ToggleF.Name = "ToggleF"
            ToggleF.Parent = ToggleFrame
            ToggleF.BackgroundColor3 = Color3.fromRGB(40, 40, 48)
            ToggleF.BackgroundTransparency = 0
            ToggleF.BorderSizePixel = 0
            ToggleF.Position = UDim2.new(0.867647052, 0, 0.142857149, 0)
            ToggleF.Size = UDim2.new(0, 45, 0, 23)

            ToggleCorner.CornerRadius = UDim.new(0, 25)
            ToggleCorner.Name = "ToggleCorner"
            ToggleCorner.Parent = ToggleF

            ToggleButton.Name = "ToggleButton"
            ToggleButton.Parent = ToggleF
            ToggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 48)
            ToggleButton.BackgroundTransparency = 1
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Size = UDim2.new(0, 45, 0, 23)
            ToggleButton.Font = UIFont
            ToggleButton.Text = ""
            ToggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
            ToggleButton.TextSize = 14.000
            ToggleButton.ZIndex = 2

            ToggleCircle.Name = "ToggleCircle"
            ToggleCircle.Parent = ToggleF
            ToggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ToggleCircle.Position = UDim2.new(0.09, 0, 0.09, 0)
            ToggleCircle.Size = UDim2.new(0, 19, 0, 19)
            ToggleCircle.ZIndex = 3

            ToggleCircleCorner.CornerRadius = UDim.new(1, 0)
            ToggleCircleCorner.Name = "ToggleCircleCorner"
            ToggleCircleCorner.Parent = ToggleCircle

            -- Function to toggle the state with smooth animation
            local function UpdateToggle()
                if ToggleEnabled then 
                    game:GetService("TweenService"):Create(ToggleF, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Theme.AccentColor
                    }):Play() 
                    
                    game:GetService("TweenService"):Create(ToggleCircle, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                        Position = UDim2.new(0.55, 0, 0.09, 0)
                    }):Play() 
                else
                    game:GetService("TweenService"):Create(ToggleF, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(40, 40, 48)
                    }):Play() 
                    
                    game:GetService("TweenService"):Create(ToggleCircle, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                        Position = UDim2.new(0.09, 0, 0.09, 0)
                    }):Play() 
                end
            end

            ToggleButton.MouseButton1Down:Connect(function()
                ToggleEnabled = not ToggleEnabled
                UpdateToggle()
                pcall(Callback, ToggleEnabled)
            end)
            
            -- Hover effects
            ToggleFrame.MouseEnter:Connect(function()
                if not ToggleEnabled then
                    game:GetService("TweenService"):Create(ToggleF, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(50, 50, 58)
                    }):Play()
                end
                
                game:GetService("TweenService"):Create(ToggleFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Color3.fromRGB(35, 35, 43)
                }):Play()
            end)
            
            ToggleFrame.MouseLeave:Connect(function()
                if not ToggleEnabled then
                    game:GetService("TweenService"):Create(ToggleF, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(40, 40, 48)
                    }):Play()
                end
                
                game:GetService("TweenService"):Create(ToggleFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Theme.ContrastBackground
                }):Play()
            end)
            
            -- Return ToggleFunction table to allow updating the toggle
            local ToggleFunction = {}
            
            function ToggleFunction:UpdateToggle(State)
                if State ~= nil then
                    ToggleEnabled = State
                    UpdateToggle()
                    pcall(Callback, ToggleEnabled)
                end
            end
            
            return ToggleFunction
        end

        function Elements:Slider(Name, Min, Max, Callback)
            local Name = Name or "Slider"
            local Callback = Callback or function() end
            local Max = Max or 500
            local Min = Min or 16
            local Value = Min
            local IsDragging = false
            
            local SliderFrame = Instance.new("Frame")
            local SliderFrameCorner = Instance.new("UICorner")
            local SliderButton = Instance.new("TextButton")
            local SliderButtonCorner = Instance.new("UICorner")
            local SliderTrail = Instance.new("Frame")
            local SliderTrailCorner = Instance.new("UICorner")
            local SliderName = Instance.new("TextLabel")
            local SliderNamePadding = Instance.new("UIPadding")
            local SliderValue = Instance.new("TextLabel")
            local SliderValuePadding = Instance.new("UIPadding")
            local SliderCircle = Instance.new("Frame")
            local SliderCircleCorner = Instance.new("UICorner")

            SliderFrame.Name = tostring(Name).."_Slider"
            SliderFrame.Parent = Tab
            SliderFrame.BackgroundColor3 = Theme.ContrastBackground
            SliderFrame.Size = UDim2.new(0, 408, 0, 50)

            SliderFrameCorner.Name = "SliderFrameCorner"
            SliderFrameCorner.Parent = SliderFrame
            SliderFrameCorner.CornerRadius = UDim.new(0, 4)

            SliderButton.Name = "SliderButton"
            SliderButton.Parent = SliderFrame
            SliderButton.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
            SliderButton.BorderSizePixel = 0
            SliderButton.Position = UDim2.new(0.0242369417, 0, 0.639999986, 0)
            SliderButton.Size = UDim2.new(0, 389, 0, 10)
            SliderButton.Font = UIFont
            SliderButton.Text = ""
            SliderButton.TextColor3 = Color3.fromRGB(0, 0, 0)
            SliderButton.TextSize = 14.000
            SliderButton.AutoButtonColor = false

            SliderButtonCorner.Name = "SliderButtonCorner"
            SliderButtonCorner.Parent = SliderButton
            SliderButtonCorner.CornerRadius = UDim.new(1, 0)

            SliderTrail.Name = "SliderTrail"
            SliderTrail.Parent = SliderButton
            SliderTrail.BackgroundColor3 = Theme.AccentColor
            SliderTrail.Size = UDim2.new(0, 0, 0, 10)
            SliderTrail.BorderSizePixel = 0

            SliderTrailCorner.Name = "SliderTrailCorner"
            SliderTrailCorner.Parent = SliderTrail
            SliderTrailCorner.CornerRadius = UDim.new(1, 0)
            
            SliderCircle.Name = "SliderCircle"
            SliderCircle.Parent = SliderTrail
            SliderCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SliderCircle.BorderSizePixel = 0
            SliderCircle.Position = UDim2.new(1, -8, 0.5, 0) -- Adjusted initial position logic slightly
            SliderCircle.Size = UDim2.new(0, 16, 0, 16)
            SliderCircle.ZIndex = 2
            SliderCircle.AnchorPoint = Vector2.new(0.5, 0.5) -- Centered anchor point for better positioning
            
            SliderCircleCorner.CornerRadius = UDim.new(1, 0)
            SliderCircleCorner.Name = "SliderCircleCorner"
            SliderCircleCorner.Parent = SliderCircle

            SliderName.Name = "SliderName"
            SliderName.Parent = SliderFrame
            SliderName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SliderName.BackgroundTransparency = 1.000
            SliderName.BorderSizePixel = 0
            SliderName.Size = UDim2.new(0, 320, 0, 26)
            SliderName.Font = UIFont
            SliderName.Text = Name
            SliderName.TextColor3 = Theme.LightText
            SliderName.TextSize = 16.000
            SliderName.TextXAlignment = Enum.TextXAlignment.Left

            SliderNamePadding.Name = "SliderNamePadding"
            SliderNamePadding.Parent = SliderName
            SliderNamePadding.PaddingLeft = UDim.new(0, 10)

            SliderValue.Name = "SliderValue"
            SliderValue.Parent = SliderFrame
            SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SliderValue.BackgroundTransparency = 1.000
            SliderValue.BorderSizePixel = 0
            SliderValue.Position = UDim2.new(0.802061796, 0, 0, 0)
            SliderValue.Size = UDim2.new(0, 80, 0, 26)
            SliderValue.Font = UIFont
            SliderValue.Text = tostring(Min)
            SliderValue.TextColor3 = Theme.LightText
            SliderValue.TextSize = 16.000
            SliderValue.TextXAlignment = Enum.TextXAlignment.Right
            SliderValue.TextTransparency = 0.5 -- Start slightly dimmed

            SliderValuePadding.Name = "SliderValuePadding"
            SliderValuePadding.Parent = SliderValue
            SliderValuePadding.PaddingRight = UDim.new(0, 10)

            local uis = game:GetService("UserInputService")
            local mouse = game:GetService("Players").LocalPlayer:GetMouse()
            
            local function UpdateSliderValue(xPos)
                local relativeX = math.clamp(xPos - SliderButton.AbsolutePosition.X, 0, SliderButton.AbsoluteSize.X)
                local sizeX = relativeX / SliderButton.AbsoluteSize.X
                
                Value = math.floor(((Max - Min) * sizeX) + Min + 0.5) -- Add 0.5 for better rounding
                SliderValue.Text = tostring(Value)
                SliderTrail.Size = UDim2.new(sizeX, 0, 1, 0)
                
                pcall(function()
                    Callback(Value)
                end)
            end
            
            SliderButton.MouseButton1Down:Connect(function()
                IsDragging = true
                SliderValue.TextTransparency = 0 -- Make value fully visible when dragging
                UpdateSliderValue(mouse.X)
                
                local moveConnection
                local releaseConnection
                
                moveConnection = mouse.Move:Connect(function()
                    if IsDragging then
                        UpdateSliderValue(mouse.X)
                    end
                end)
                
                releaseConnection = uis.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        IsDragging = false
                        if moveConnection then moveConnection:Disconnect() end
                        if releaseConnection then releaseConnection:Disconnect() end
                        
                        -- Keep value visible briefly after drag, then dim if not hovering
                        task.wait(0.5) 
                        if not SliderButton.MouseEnter then 
                             game:GetService("TweenService"):Create(SliderValue, TweenInfo.new(0.3), {TextTransparency = 0.5}):Play()
                        end
                    end
                end)
            end)
            
            SliderButton.MouseEnter:Connect(function()
                game:GetService("TweenService"):Create(SliderButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(55, 55, 65)}):Play()
                game:GetService("TweenService"):Create(SliderValue, TweenInfo.new(0.2), {TextTransparency = 0}):Play() -- Show value on hover
            end)
            
            SliderButton.MouseLeave:Connect(function()
                game:GetService("TweenService"):Create(SliderButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(45, 45, 55)}):Play()
                if not IsDragging then
                    game:GetService("TweenService"):Create(SliderValue, TweenInfo.new(0.2), {TextTransparency = 0.5}):Play() -- Dim value if not dragging
                end
            end)
            
            local SliderFunc = {}
            
            function SliderFunc:SetValue(NewValue)
                Value = math.clamp(NewValue, Min, Max)
                local sizeX = (Value - Min) / (Max - Min)
                
                SliderTrail.Size = UDim2.new(sizeX, 0, 1, 0)
                SliderValue.Text = tostring(Value)
                
                pcall(function()
                    Callback(Value)
                end)
            end
            
            -- Initialize visual state based on Min value
            SliderFunc:SetValue(Min)
            
            return SliderFunc
        end

        function Elements:Textbox(Name, Default, Callback)
            local Name = Name or "Textbox"
            local Default = Default or ""
            local Callback = Callback or function() end
            local TextboxFrame = Instance.new("Frame")
            local TextboxFrameCorner = Instance.new("UICorner")
            local TextboxName = Instance.new("TextLabel")
            local TextboxNamePadding = Instance.new("UIPadding")
            local Textbox = Instance.new("TextBox")
            local TextboxCorner = Instance.new("UICorner")

            TextboxFrame.Name = tostring(Name).."_Textbox"
            TextboxFrame.Parent = Tab
            TextboxFrame.BackgroundColor3 = Theme.ContrastBackground
            TextboxFrame.Size = UDim2.new(0, 408, 0, 35)

            TextboxFrameCorner.Name = "TextboxFrameCorner"
            TextboxFrameCorner.Parent = TextboxFrame
            TextboxFrameCorner.CornerRadius = UDim.new(0, 4)

            TextboxName.Name = "TextboxName"
            TextboxName.Parent = TextboxFrame
            TextboxName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            TextboxName.BackgroundTransparency = 1.000
            TextboxName.BorderSizePixel = 0
            TextboxName.Size = UDim2.new(0, 235, 0, 35)
            TextboxName.Font = UIFont
            TextboxName.Text = Name
            TextboxName.TextColor3 = Theme.LightText
            TextboxName.TextSize = 16.000
            TextboxName.TextXAlignment = Enum.TextXAlignment.Left

            TextboxNamePadding.Name = "TextboxNamePadding"
            TextboxNamePadding.Parent = TextboxName
            TextboxNamePadding.PaddingLeft = UDim.new(0, 10)

            Textbox.Name = "Textbox"
            Textbox.Parent = TextboxFrame
            Textbox.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
            Textbox.BorderSizePixel = 0
            Textbox.Position = UDim2.new(0.610294104, 0, 0.171428576, 0)
            Textbox.Size = UDim2.new(0, 150, 0, 23)
            Textbox.Font = UIFont
            Textbox.PlaceholderColor3 = Color3.fromRGB(180, 180, 180)
            Textbox.PlaceholderText = Default
            Textbox.Text = ""
            Textbox.TextColor3 = Theme.LightText
            Textbox.TextSize = 14.000
            Textbox.ClearTextOnFocus = false

            TextboxCorner.Name = "TextboxCorner"
            TextboxCorner.Parent = Textbox
            TextboxCorner.CornerRadius = UDim.new(0, 4)
            
            -- Add subtle glow effect when focused
            local TextboxStroke = Instance.new("UIStroke")
            TextboxStroke.Name = "TextboxStroke"
            TextboxStroke.Parent = Textbox
            TextboxStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            TextboxStroke.Color = Theme.AccentColor
            TextboxStroke.Transparency = 1
            TextboxStroke.Thickness = 1.5

            Textbox.Focused:Connect(function()
                game:GetService("TweenService"):Create(Textbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Color3.fromRGB(50, 50, 60)
                }):Play()
                
                game:GetService("TweenService"):Create(TextboxStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    Transparency = 0
                }):Play()
            end)

            Textbox.FocusLost:Connect(function()
                game:GetService("TweenService"):Create(Textbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Color3.fromRGB(45, 45, 55)
                }):Play()
                
                game:GetService("TweenService"):Create(TextboxStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    Transparency = 1
                }):Play()
                
                Callback(Textbox.Text)
            end)
            
            -- Hover effects
            Textbox.MouseEnter:Connect(function()
                if not Textbox:IsFocused() then
                    game:GetService("TweenService"):Create(Textbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(50, 50, 60)
                    }):Play()
                end
            end)
            
            Textbox.MouseLeave:Connect(function()
                if not Textbox:IsFocused() then
                    game:GetService("TweenService"):Create(Textbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(45, 45, 55)
                    }):Play()
                end
            end)
            
            -- Return textbox functions
            local TextboxFunc = {}
            
            function TextboxFunc:SetText(Text)
                Textbox.Text = Text
                Callback(Text)
            end
            
            function TextboxFunc:GetText()
                return Textbox.Text
            end
            
            return TextboxFunc
        end

        function Elements:Keybind(Name,xKey,Callback)
            local Name = Name or "Keybind"
            local Callback = Callback or function() end
            local Keyx = xKey.Name
            local KeybindFrame = Instance.new("Frame")
            local KeybindFrameCorner = Instance.new("UICorner")
            local KeybindName = Instance.new("TextLabel")
            local KeybindNamePadding = Instance.new("UIPadding")
            local KeybindButton = Instance.new("TextButton")
            local KeybindButtonCorner = Instance.new("UICorner")

            KeybindFrame.Name = tostring(Name).."_Keybind"
            KeybindFrame.Parent = Tab
            KeybindFrame.BackgroundColor3 = Theme.ContrastBackground
            KeybindFrame.BorderSizePixel = 0
            KeybindFrame.Size = UDim2.new(0, 408, 0, 35)
            
            KeybindFrameCorner.Name = "KeybindFrameCorner"
            KeybindFrameCorner.Parent = KeybindFrame
            
            KeybindName.Name = "KeybindName"
            KeybindName.Parent = KeybindFrame
            KeybindName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            KeybindName.BackgroundTransparency = 1.000
            KeybindName.BorderSizePixel = 0
            KeybindName.Size = UDim2.new(0, 235, 0, 35)
            KeybindName.Font = UIFont
            KeybindName.Text = Name
            KeybindName.TextColor3 = Theme.LightText
            KeybindName.TextSize = 16.000
            KeybindName.TextXAlignment = Enum.TextXAlignment.Left
            
            KeybindNamePadding.Name = "KeybindNamePadding"
            KeybindNamePadding.Parent = KeybindName
            KeybindNamePadding.PaddingLeft = UDim.new(0, 10)
            
            KeybindButton.Name = "KeybindButton"
            KeybindButton.Parent = KeybindFrame
            KeybindButton.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
            KeybindButton.Position = UDim2.new(0.610294104, 0, 0.171428576, 0)
            KeybindButton.Size = UDim2.new(0, 150, 0, 23)
            KeybindButton.Font = Enum.Font.Gotham
            KeybindButton.Text = Keyx
            KeybindButton.TextColor3 = Theme.LightText
            KeybindButton.TextSize = 14.000
            KeybindButton.ZIndex = 2
            
            KeybindButtonCorner.Name = "KeybindButtonCorner"
            KeybindButtonCorner.Parent = KeybindButton

            KeybindButton.MouseButton1Click:connect(function() 
                game.TweenService:Create(KeybindButton, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
                    BackgroundColor3 = Theme.AccentColor
                }):Play()
                KeybindButton.Text = ". . ."
                local v1, v2 = game:GetService('UserInputService').InputBegan:wait();
                if v1.KeyCode.Name ~= "Unknown" then
                    game.TweenService:Create(KeybindButton, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {
                        BackgroundColor3 = Color3.fromRGB(45, 45, 55)
                    }):Play()
                    KeybindButton.Text = v1.KeyCode.Name
                    Keyx = v1.KeyCode.Name;
                end
            end)
    
            game:GetService("UserInputService").InputBegan:connect(function(a, gp) 
                if not gp then 
                    if a.KeyCode.Name == Keyx then 
                        Callback()
                    end
                end
            end)
        end

        function Elements:Dropdown(Name,Listx,Callback)
            local Name = Name or "Dropdown"
            local DropdownFunction = {}
            local Callback = Callback or function() end
            local opened = false 
            
            -- Create a container for the dropdown that will manage all dropdown elements
            local DropdownContainer = Instance.new("Frame")
            local DropdownFrame = Instance.new("Frame")
            local DropdownFrameCorner = Instance.new("UICorner")
            local DropdownName = Instance.new("TextLabel")
            local DropdownNamePadding = Instance.new("UIPadding")
            local DropdownButton = Instance.new("TextButton")
            local DropList = Instance.new("Frame")
            local DropListLayout = Instance.new("UIListLayout")
            local DropListPadding = Instance.new("UIPadding")
            
            -- Set up the container
            DropdownContainer.Name = tostring(Name).."_DropdownContainer"
            DropdownContainer.Parent = Tab
            DropdownContainer.BackgroundTransparency = 1
            DropdownContainer.Size = UDim2.new(0, 408, 0, 35) -- Will be adjusted as dropdown opens
            DropdownContainer.ClipsDescendants = false
            
            -- Set up the main frame
            DropdownFrame.Name = tostring(Name).."_Dropdown"
            DropdownFrame.Parent = DropdownContainer
            DropdownFrame.BackgroundColor3 = Theme.ContrastBackground
            DropdownFrame.BorderSizePixel = 0
            DropdownFrame.Size = UDim2.new(0, 408, 0, 35)
            DropdownFrame.ZIndex = 10

            DropdownFrameCorner.Name = "DropdownFrameCorner"
            DropdownFrameCorner.Parent = DropdownFrame
            DropdownFrameCorner.CornerRadius = UDim.new(0, 4)

            DropdownName.Name = "DropdownName"
            DropdownName.Parent = DropdownFrame
            DropdownName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            DropdownName.BackgroundTransparency = 1.000
            DropdownName.BorderSizePixel = 0
            DropdownName.Size = UDim2.new(0, 358, 0, 35)
            DropdownName.Font = UIFont
            DropdownName.Text = Name
            DropdownName.TextColor3 = Theme.LightText
            DropdownName.TextSize = 16.000
            DropdownName.TextXAlignment = Enum.TextXAlignment.Left
            DropdownName.ZIndex = 11

            DropdownNamePadding.Name = "DropdownNamePadding"
            DropdownNamePadding.Parent = DropdownName
            DropdownNamePadding.PaddingLeft = UDim.new(0, 10)

            DropdownButton.Name = "DropdownButton"
            DropdownButton.Parent = DropdownFrame
            DropdownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            DropdownButton.BackgroundTransparency = 1.000
            DropdownButton.BorderSizePixel = 0
            DropdownButton.Size = UDim2.new(0, 408, 0, 35)
            DropdownButton.Font = UIFont
            DropdownButton.Text = ""
            DropdownButton.TextColor3 = Color3.fromRGB(0, 0, 0)
            DropdownButton.TextSize = 14.000
            DropdownButton.ZIndex = 12

            -- Set up the dropdown list
            DropList.Name = "DropList"
            DropList.Parent = DropdownContainer
            DropList.BackgroundColor3 = Theme.ContrastBackground
            DropList.BorderSizePixel = 0
            DropList.Position = UDim2.new(0, 0, 0, 35) -- Position it directly below the main frame
            DropList.Size = UDim2.new(1, 0, 0, 0) -- Start with 0 height
            DropList.ZIndex = 5
            DropList.Visible = false
            
            -- Add corner radius to dropdown list
            local DropListCorner = Instance.new("UICorner")
            DropListCorner.CornerRadius = UDim.new(0, 4)
            DropListCorner.Parent = DropList

            DropListLayout.Name = "DropListLayout"
            DropListLayout.Parent = DropList
            DropListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            DropListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            DropListLayout.Padding = UDim.new(0, 3)
            
            DropListPadding.Name = "DropListPadding"
            DropListPadding.Parent = DropList
            DropListPadding.PaddingTop = UDim.new(0, 3)
            DropListPadding.PaddingBottom = UDim.new(0, 3)

            -- Function to update the dropdown list size
            local function UpdateDropListSize()
                local options = DropList:GetChildren()
                local optionCount = 0
                
                for _, option in pairs(options) do
                    if option:IsA("TextButton") then
                        optionCount = optionCount + 1
                    end
                end
                
                -- Calculate content size based on number of options and padding
                local optionHeight = 35 -- Assuming fixed height for each option
                local verticalPadding = DropListPadding.PaddingTop.Offset + DropListPadding.PaddingBottom.Offset
                local layoutPadding = (optionCount - 1) * DropListLayout.Padding.Offset
                local contentSize = (optionCount * optionHeight) + verticalPadding + layoutPadding
                
                return math.max(contentSize, 0) -- Ensure size is not negative
            end
            
            -- Function to handle dropdown open/close
            local function ToggleDropdown()
                opened = not opened
                local contentSize = UpdateDropListSize()
                local targetContainerHeight
                local targetDropListHeight
                
                if opened then
                    -- Calculate target heights for open state
                    targetDropListHeight = contentSize
                    targetContainerHeight = 35 + targetDropListHeight -- Base height + DropList height

                    -- Make DropList visible before animating
                    DropList.Visible = true 
                    
                    -- Animate the DropdownContainer and DropList sizes simultaneously
                    game:GetService("TweenService"):Create(DropdownContainer, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        Size = UDim2.new(0, 408, 0, targetContainerHeight)
                    }):Play()
                    game:GetService("TweenService"):Create(DropList, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1, 0, 0, targetDropListHeight)
                    }):Play()

                    -- Trigger Tab scroll size update AFTER starting the animation
                    task.wait(0.01) -- Short delay to allow layout calculation
                    Size()
                else
                    -- Calculate target heights for closed state
                    targetDropListHeight = 0
                    targetContainerHeight = 35
                    
                    -- Animate the DropdownContainer and DropList sizes simultaneously
                    game:GetService("TweenService"):Create(DropdownContainer, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        Size = UDim2.new(0, 408, 0, targetContainerHeight)
                    }):Play()
                    game:GetService("TweenService"):Create(DropList, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        Size = UDim2.new(1, 0, 0, targetDropListHeight)
                    }):Play()
                    
                    -- Wait for animation to complete then hide DropList and update scroll size
                    task.wait(0.2)
                    DropList.Visible = false
                    Size()
                end
            end

            -- Button hover animations
            DropdownButton.MouseEnter:Connect(function()
                game:GetService("TweenService"):Create(DropdownFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Color3.fromRGB(40, 40, 48)
                }):Play()
            end)
            
            DropdownButton.MouseLeave:Connect(function()
                game:GetService("TweenService"):Create(DropdownFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                    BackgroundColor3 = Theme.ContrastBackground
                }):Play()
            end)

            -- Toggle dropdown when clicked
            DropdownButton.MouseButton1Down:Connect(ToggleDropdown)

            -- Add dropdown options
            for i, v in pairs(Listx) do 
                local Option = Instance.new("TextButton")
                local OptionCorner = Instance.new("UICorner")
                
                Option.Name = tostring(v).."_Option"
                Option.Parent = DropList
                Option.BackgroundColor3 = Theme.ContrastBackground
                Option.Size = UDim2.new(0, 400, 0, 35)
                Option.Font = UIFont
                Option.Text = v
                Option.TextColor3 = Theme.LightText
                Option.TextSize = 16.000
                Option.ZIndex = 6

                OptionCorner.Name = "OptionCorner"
                OptionCorner.Parent = Option
                OptionCorner.CornerRadius = UDim.new(0, 4)

                Option.MouseButton1Down:Connect(function()
                    Callback(v)
                    for a, b in pairs(DropList:GetChildren()) do 
                        if b:IsA("TextButton") then 
                            b.TextColor3 = Theme.LightText
                        end 
                    end
                    
                    game:GetService("TweenService"):Create(Option, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        TextColor3 = Theme.AccentColor
                    }):Play()
                    
                    -- Close dropdown after selection
                    ToggleDropdown()
                end)

                Option.MouseEnter:Connect(function()
                    game:GetService("TweenService"):Create(Option, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(40, 40, 48)
                    }):Play()
                end)
                
                Option.MouseLeave:Connect(function()
                    game:GetService("TweenService"):Create(Option, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Theme.ContrastBackground
                    }):Play()
                end)
            end

            -- Function to update dropdown options
            function DropdownFunction:UpdateDropdown(List)
                -- Clear existing options
                for _, child in pairs(DropList:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                
                -- Add new options
                for _, v in pairs(List) do 
                    local Option = Instance.new("TextButton")
                    local OptionCorner = Instance.new("UICorner")
    
                    Option.Name = tostring(v).."_Option"
                    Option.Parent = DropList
                    Option.BackgroundColor3 = Theme.ContrastBackground
                    Option.Size = UDim2.new(0, 400, 0, 35)
                    Option.Font = UIFont
                    Option.Text = v
                    Option.TextColor3 = Theme.LightText
                    Option.TextSize = 16.000
                    Option.ZIndex = 6
    
                    OptionCorner.Name = "OptionCorner"
                    OptionCorner.Parent = Option
                    OptionCorner.CornerRadius = UDim.new(0, 4)
    
                    Option.MouseButton1Down:Connect(function()
                        Callback(v)
                        for a, b in pairs(DropList:GetChildren()) do 
                            if b:IsA("TextButton") then 
                                b.TextColor3 = Theme.LightText
                            end 
                        end
                        
                        game:GetService("TweenService"):Create(Option, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                            TextColor3 = Theme.AccentColor
                        }):Play()
                        
                        -- Close dropdown after selection
                        ToggleDropdown()
                    end)
    
                    Option.MouseEnter:Connect(function()
                        game:GetService("TweenService"):Create(Option, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                            BackgroundColor3 = Color3.fromRGB(40, 40, 48)
                        }):Play()
                    end)
                    
                    Option.MouseLeave:Connect(function()
                        game:GetService("TweenService"):Create(Option, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                            BackgroundColor3 = Theme.ContrastBackground
                        }):Play()
                    end)
                end
                
                -- Update dropdown layout size initially and if it's open
                local initialContentSize = UpdateDropListSize()
                if opened then
                    DropdownContainer.Size = UDim2.new(0, 408, 0, 35 + initialContentSize)
                    DropList.Size = UDim2.new(1, 0, 0, initialContentSize)
                end
            end
            
            -- Initialize dropdown options
            DropdownFunction:UpdateDropdown(Listx)

            return DropdownFunction
        end
        return Elements
    end
    return xTabs
end
return Library
